// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hiPower.Database;

#nullable disable

namespace hiPower.Database.Migrations
{
    [DbContext(typeof(ManagerDbContext))]
    [Migration("20241208160756_RenameToDataCenter")]
    partial class RenameToDataCenter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("hiPower.Entity.DataCenter", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("T_DataCenter", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7EB5999F-AEF5-11EF-9FD9-47F022E22A50",
                            Address = "",
                            City = "",
                            Country = "Default",
                            Description = "Initial location",
                            Name = "Default",
                            PostalCode = "",
                            Region = ""
                        });
                });

            modelBuilder.Entity("hiPower.Entity.MonitorService", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MonitorState")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("ServiceId");

                    b.HasIndex("ServiceId", "MonitorState");

                    b.ToTable("T_MonitorService", (string)null);
                });

            modelBuilder.Entity("hiPower.Entity.MonitorVariables", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Variable")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("ServiceId");

                    b.ToTable("T_MonitorVariables", (string)null);
                });

            modelBuilder.Entity("hiPower.Entity.ServiceDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Auth")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<string>("DataCenterId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("HostAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("LocalId")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("MonitorId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OS")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Port")
                        .HasColumnType("text");

                    b.Property<string>("Proto")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasPrecision(0, 5)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Version")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("DataCenterId");

                    b.ToTable("T_ServiceDetails", (string)null);
                });

            modelBuilder.Entity("hiPower.Entity.StatisticsVariable", b =>
                {
                    b.Property<string>("Variable")
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Variable");

                    b.ToTable("T_StatisticsVariable", (string)null);

                    b.HasData(
                        new
                        {
                            Variable = "backend-queries",
                            Description = "Number of queries sent to the backend(s)"
                        },
                        new
                        {
                            Variable = "corrupt-packets",
                            Description = "Number of corrupt packets received"
                        },
                        new
                        {
                            Variable = "deferred-cache-inserts",
                            Description = "Amount of cache inserts that were deferred because of maintenance"
                        },
                        new
                        {
                            Variable = "deferred-cache-lookup",
                            Description = "Amount of cache lookups that were deferred because of maintenance"
                        },
                        new
                        {
                            Variable = "deferred-packetcache-inserts",
                            Description = "Amount of packet cache inserts that were deferred because of maintenance"
                        },
                        new
                        {
                            Variable = "deferred-packetcache-lookup",
                            Description = "Amount of packet cache lookups that were deferred because of maintenance"
                        },
                        new
                        {
                            Variable = "dnsupdate-answers",
                            Description = "DNS update packets successfully answered."
                        },
                        new
                        {
                            Variable = "dnsupdate-changes",
                            Description = "DNS update changes to records in total."
                        },
                        new
                        {
                            Variable = "dnsupdate-queries",
                            Description = "DNS update packets received."
                        },
                        new
                        {
                            Variable = "dnsupdate-refused",
                            Description = "DNS update packets that are refused."
                        },
                        new
                        {
                            Variable = "incoming-notifications",
                            Description = "NOTIFY packets received."
                        },
                        new
                        {
                            Variable = "noerror-packets",
                            Description = "Number of times a NOERROR packet was sent out"
                        },
                        new
                        {
                            Variable = "nxdomain-packets",
                            Description = "Number of times an NXDOMAIN packet was sent out"
                        },
                        new
                        {
                            Variable = "overload-drops",
                            Description = "Queries dropped because backends overloaded"
                        },
                        new
                        {
                            Variable = "packetcache-hit",
                            Description = "Number of hits on the packet cache"
                        },
                        new
                        {
                            Variable = "packetcache-miss",
                            Description = "Number of misses on the packet cache"
                        },
                        new
                        {
                            Variable = "packetcache-size",
                            Description = "Number of entries in the packet cache"
                        },
                        new
                        {
                            Variable = "query-cache-hit",
                            Description = "Number of hits on the query cache"
                        },
                        new
                        {
                            Variable = "query-cache-miss",
                            Description = "Number of misses on the query cache"
                        },
                        new
                        {
                            Variable = "query-cache-size",
                            Description = "Number of entries in the query cache"
                        },
                        new
                        {
                            Variable = "rd-queries",
                            Description = "Number of recursion desired questions"
                        },
                        new
                        {
                            Variable = "recursing-answers",
                            Description = "Number of recursive answers sent out"
                        },
                        new
                        {
                            Variable = "recursing-questions",
                            Description = "Number of questions sent to recursor"
                        },
                        new
                        {
                            Variable = "recursion-unanswered",
                            Description = "Number of packets unanswered by configured recursor"
                        },
                        new
                        {
                            Variable = "security-status",
                            Description = "Security status based on regular polling"
                        },
                        new
                        {
                            Variable = "servfail-packets",
                            Description = "Number of times a server-failed packet was sent out"
                        },
                        new
                        {
                            Variable = "signatures",
                            Description = "Number of DNSSEC signatures made"
                        },
                        new
                        {
                            Variable = "tcp-answers",
                            Description = "Number of answers sent out over TCP"
                        },
                        new
                        {
                            Variable = "tcp-answers-bytes",
                            Description = "Total size of answers sent out over TCP"
                        },
                        new
                        {
                            Variable = "tcp-queries",
                            Description = "Number of TCP queries received"
                        },
                        new
                        {
                            Variable = "tcp4-answers",
                            Description = "Number of IPv4 answers sent out over TCP"
                        },
                        new
                        {
                            Variable = "tcp4-answers-bytes",
                            Description = "Total size of answers sent out over TCPv4"
                        },
                        new
                        {
                            Variable = "tcp4-queries",
                            Description = "Number of IPv4 TCP queries received"
                        },
                        new
                        {
                            Variable = "tcp6-answers",
                            Description = "Number of IPv6 answers sent out over TCP"
                        },
                        new
                        {
                            Variable = "tcp6-answers-bytes",
                            Description = "Total size of answers sent out over TCPv6"
                        },
                        new
                        {
                            Variable = "tcp6-queries",
                            Description = "Number of IPv6 TCP queries received"
                        },
                        new
                        {
                            Variable = "timedout-packets",
                            Description = "Number of packets which weren't answered within timeout set"
                        },
                        new
                        {
                            Variable = "udp-answers",
                            Description = "Number of answers sent out over UDP"
                        },
                        new
                        {
                            Variable = "udp-answers-bytes",
                            Description = "Total size of answers sent out over UDP"
                        },
                        new
                        {
                            Variable = "udp-do-queries",
                            Description = "Number of UDP queries received with DO bit"
                        },
                        new
                        {
                            Variable = "udp-queries",
                            Description = "Number of UDP queries received"
                        },
                        new
                        {
                            Variable = "udp4-answers",
                            Description = "Number of IPv4 answers sent out over UDP"
                        },
                        new
                        {
                            Variable = "udp4-answers-bytes",
                            Description = "Total size of answers sent out over UDPv4"
                        },
                        new
                        {
                            Variable = "udp4-queries",
                            Description = "Number of IPv4 UDP queries received"
                        },
                        new
                        {
                            Variable = "udp6-answers",
                            Description = "Number of IPv6 answers sent out over UDP"
                        },
                        new
                        {
                            Variable = "udp6-answers-bytes",
                            Description = "Total size of answers sent out over UDPv6"
                        },
                        new
                        {
                            Variable = "udp6-queries",
                            Description = "Number of IPv6 UDP queries received"
                        },
                        new
                        {
                            Variable = "unauth-packets",
                            Description = "Number of times a zone we are not auth for was queried"
                        },
                        new
                        {
                            Variable = "zone-cache-hit",
                            Description = "Number of zone cache hits"
                        },
                        new
                        {
                            Variable = "zone-cache-miss",
                            Description = "Number of zone cache misses"
                        },
                        new
                        {
                            Variable = "zone-cache-size",
                            Description = "Number of entries in the zone cache"
                        },
                        new
                        {
                            Variable = "cpu-iowait",
                            Description = "Time spent waiting for I/O to complete by the whole system, in units of USER_HZ"
                        },
                        new
                        {
                            Variable = "cpu-steal",
                            Description = "Stolen time, which is the time spent by the whole system in other operating systems when running in a virtualized environment, in units of USER_HZ"
                        },
                        new
                        {
                            Variable = "fd-usage",
                            Description = "Number of open filedescriptors"
                        },
                        new
                        {
                            Variable = "key-cache-size",
                            Description = "Number of entries in the key cache"
                        },
                        new
                        {
                            Variable = "latency",
                            Description = "Average number of microseconds needed to answer a question"
                        },
                        new
                        {
                            Variable = "meta-cache-size",
                            Description = "Number of entries in the metadata cache"
                        },
                        new
                        {
                            Variable = "open-tcp-connections",
                            Description = "Number of currently open TCP connections"
                        },
                        new
                        {
                            Variable = "qsize-q",
                            Description = "Number of questions waiting for database attention"
                        },
                        new
                        {
                            Variable = "real-memory-usage",
                            Description = "Actual unique use of memory in bytes (approx)"
                        },
                        new
                        {
                            Variable = "ring-logmessages-capacity",
                            Description = "Maximum number of entries in the logmessages ring"
                        },
                        new
                        {
                            Variable = "ring-logmessages-size",
                            Description = "Number of entries in the logmessages ring"
                        },
                        new
                        {
                            Variable = "ring-noerror-queries-capacity",
                            Description = "Maximum number of entries in the noerror-queries ring"
                        },
                        new
                        {
                            Variable = "ring-noerror-queries-size",
                            Description = "Number of entries in the noerror-queries ring"
                        },
                        new
                        {
                            Variable = "ring-nxdomain-queries-capacity",
                            Description = "Maximum number of entries in the nxdomain-queries ring"
                        },
                        new
                        {
                            Variable = "ring-nxdomain-queries-size",
                            Description = "Number of entries in the nxdomain-queries ring"
                        },
                        new
                        {
                            Variable = "ring-queries-capacity",
                            Description = "Maximum number of entries in the queries ring"
                        },
                        new
                        {
                            Variable = "ring-queries-size",
                            Description = "Number of entries in the queries ring"
                        },
                        new
                        {
                            Variable = "ring-remotes-capacity",
                            Description = "Maximum number of entries in the remotes ring"
                        },
                        new
                        {
                            Variable = "ring-remotes-corrupt-capacity",
                            Description = "Maximum number of entries in the remotes-corrupt ring"
                        },
                        new
                        {
                            Variable = "ring-remotes-corrupt-size",
                            Description = "Number of entries in the remotes-corrupt ring"
                        },
                        new
                        {
                            Variable = "ring-remotes-size",
                            Description = "Number of entries in the remotes ring"
                        },
                        new
                        {
                            Variable = "ring-remotes-unauth-capacity",
                            Description = "Maximum number of entries in the remotes-unauth ring"
                        },
                        new
                        {
                            Variable = "ring-remotes-unauth-size",
                            Description = "Number of entries in the remotes-unauth ring"
                        },
                        new
                        {
                            Variable = "ring-servfail-queries-capacity",
                            Description = "Maximum number of entries in the servfail-queries ring"
                        },
                        new
                        {
                            Variable = "ring-servfail-queries-size",
                            Description = "Number of entries in the servfail-queries ring"
                        },
                        new
                        {
                            Variable = "ring-unauth-queries-capacity",
                            Description = "Maximum number of entries in the unauth-queries ring"
                        },
                        new
                        {
                            Variable = "ring-unauth-queries-size",
                            Description = "Number of entries in the unauth-queries ring"
                        },
                        new
                        {
                            Variable = "signature-cache-size",
                            Description = "Number of entries in the signature cache"
                        },
                        new
                        {
                            Variable = "sys-msec",
                            Description = "Number of msec spent in system time"
                        },
                        new
                        {
                            Variable = "udp-in-errors",
                            Description = "UDP 'in' errors"
                        },
                        new
                        {
                            Variable = "udp-noport-errors",
                            Description = "UDP 'noport' errors"
                        },
                        new
                        {
                            Variable = "udp-recvbuf-errors",
                            Description = "UDP 'recvbuf' errors"
                        },
                        new
                        {
                            Variable = "udp-sndbuf-errors",
                            Description = "UDP 'sndbuf' errors"
                        },
                        new
                        {
                            Variable = "uptime",
                            Description = "Uptime of process in seconds"
                        },
                        new
                        {
                            Variable = "user-msec",
                            Description = "Number of msec spent in user time"
                        },
                        new
                        {
                            Variable = "xfr-queue",
                            Description = "Size of the queue of zones to be XFRd"
                        });
                });

            modelBuilder.Entity("hiPower.Entity.MonitorVariables", b =>
                {
                    b.HasOne("hiPower.Entity.ServiceDetails", "ServiceDetails")
                        .WithMany("MonitorStatistics")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ServiceDetails");
                });

            modelBuilder.Entity("hiPower.Entity.ServiceDetails", b =>
                {
                    b.HasOne("hiPower.Entity.DataCenter", "DataCenter")
                        .WithMany("Servers")
                        .HasForeignKey("DataCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DataCenter");
                });

            modelBuilder.Entity("hiPower.Entity.DataCenter", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("hiPower.Entity.ServiceDetails", b =>
                {
                    b.Navigation("MonitorStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
